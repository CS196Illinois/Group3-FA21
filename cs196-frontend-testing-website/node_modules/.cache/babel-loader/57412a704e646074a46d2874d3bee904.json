{"ast":null,"code":"/*!\n * node-progress\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Expose `ProgressBar`.\n */\nexports = module.exports = ProgressBar;\n/**\n * Initialize a `ProgressBar` with the given `fmt` string and `options` or\n * `total`.\n *\n * Options:\n *\n *   - `curr` current completed index\n *   - `total` total number of ticks to complete\n *   - `width` the displayed width of the progress bar defaulting to total\n *   - `stream` the output stream defaulting to stderr\n *   - `head` head character defaulting to complete character\n *   - `complete` completion character defaulting to \"=\"\n *   - `incomplete` incomplete character defaulting to \"-\"\n *   - `renderThrottle` minimum time between updates in milliseconds defaulting to 16\n *   - `callback` optional function to call when the progress bar completes\n *   - `clear` will clear the progress bar upon termination\n *\n * Tokens:\n *\n *   - `:bar` the progress bar itself\n *   - `:current` current tick number\n *   - `:total` total ticks\n *   - `:elapsed` time elapsed in seconds\n *   - `:percent` completion percentage\n *   - `:eta` eta in seconds\n *   - `:rate` rate of ticks per second\n *\n * @param {string} fmt\n * @param {object|number} options or total\n * @api public\n */\n\nfunction ProgressBar(fmt, options) {\n  this.stream = options.stream || process.stderr;\n\n  if (typeof options == 'number') {\n    var total = options;\n    options = {};\n    options.total = total;\n  } else {\n    options = options || {};\n    if ('string' != typeof fmt) throw new Error('format required');\n    if ('number' != typeof options.total) throw new Error('total required');\n  }\n\n  this.fmt = fmt;\n  this.curr = options.curr || 0;\n  this.total = options.total;\n  this.width = options.width || this.total;\n  this.clear = options.clear;\n  this.chars = {\n    complete: options.complete || '=',\n    incomplete: options.incomplete || '-',\n    head: options.head || options.complete || '='\n  };\n  this.renderThrottle = options.renderThrottle !== 0 ? options.renderThrottle || 16 : 0;\n  this.lastRender = -Infinity;\n\n  this.callback = options.callback || function () {};\n\n  this.tokens = {};\n  this.lastDraw = '';\n}\n/**\n * \"tick\" the progress bar with optional `len` and optional `tokens`.\n *\n * @param {number|object} len or tokens\n * @param {object} tokens\n * @api public\n */\n\n\nProgressBar.prototype.tick = function (len, tokens) {\n  if (len !== 0) len = len || 1; // swap tokens\n\n  if ('object' == typeof len) tokens = len, len = 1;\n  if (tokens) this.tokens = tokens; // start time for eta\n\n  if (0 == this.curr) this.start = new Date();\n  this.curr += len; // try to render\n\n  this.render(); // progress complete\n\n  if (this.curr >= this.total) {\n    this.render(undefined, true);\n    this.complete = true;\n    this.terminate();\n    this.callback(this);\n    return;\n  }\n};\n/**\n * Method to render the progress bar with optional `tokens` to place in the\n * progress bar's `fmt` field.\n *\n * @param {object} tokens\n * @api public\n */\n\n\nProgressBar.prototype.render = function (tokens, force) {\n  force = force !== undefined ? force : false;\n  if (tokens) this.tokens = tokens;\n  if (!this.stream.isTTY) return;\n  var now = Date.now();\n  var delta = now - this.lastRender;\n\n  if (!force && delta < this.renderThrottle) {\n    return;\n  } else {\n    this.lastRender = now;\n  }\n\n  var ratio = this.curr / this.total;\n  ratio = Math.min(Math.max(ratio, 0), 1);\n  var percent = Math.floor(ratio * 100);\n  var incomplete, complete, completeLength;\n  var elapsed = new Date() - this.start;\n  var eta = percent == 100 ? 0 : elapsed * (this.total / this.curr - 1);\n  var rate = this.curr / (elapsed / 1000);\n  /* populate the bar template with percentages and timestamps */\n\n  var str = this.fmt.replace(':current', this.curr).replace(':total', this.total).replace(':elapsed', isNaN(elapsed) ? '0.0' : (elapsed / 1000).toFixed(1)).replace(':eta', isNaN(eta) || !isFinite(eta) ? '0.0' : (eta / 1000).toFixed(1)).replace(':percent', percent.toFixed(0) + '%').replace(':rate', Math.round(rate));\n  /* compute the available space (non-zero) for the bar */\n\n  var availableSpace = Math.max(0, this.stream.columns - str.replace(':bar', '').length);\n\n  if (availableSpace && process.platform === 'win32') {\n    availableSpace = availableSpace - 1;\n  }\n\n  var width = Math.min(this.width, availableSpace);\n  /* TODO: the following assumes the user has one ':bar' token */\n\n  completeLength = Math.round(width * ratio);\n  complete = Array(Math.max(0, completeLength + 1)).join(this.chars.complete);\n  incomplete = Array(Math.max(0, width - completeLength + 1)).join(this.chars.incomplete);\n  /* add head to the complete string */\n\n  if (completeLength > 0) complete = complete.slice(0, -1) + this.chars.head;\n  /* fill in the actual progress bar */\n\n  str = str.replace(':bar', complete + incomplete);\n  /* replace the extra tokens */\n\n  if (this.tokens) for (var key in this.tokens) str = str.replace(':' + key, this.tokens[key]);\n\n  if (this.lastDraw !== str) {\n    this.stream.cursorTo(0);\n    this.stream.write(str);\n    this.stream.clearLine(1);\n    this.lastDraw = str;\n  }\n};\n/**\n * \"update\" the progress bar to represent an exact percentage.\n * The ratio (between 0 and 1) specified will be multiplied by `total` and\n * floored, representing the closest available \"tick.\" For example, if a\n * progress bar has a length of 3 and `update(0.5)` is called, the progress\n * will be set to 1.\n *\n * A ratio of 0.5 will attempt to set the progress to halfway.\n *\n * @param {number} ratio The ratio (between 0 and 1 inclusive) to set the\n *   overall completion to.\n * @api public\n */\n\n\nProgressBar.prototype.update = function (ratio, tokens) {\n  var goal = Math.floor(ratio * this.total);\n  var delta = goal - this.curr;\n  this.tick(delta, tokens);\n};\n/**\n * \"interrupt\" the progress bar and write a message above it.\n * @param {string} message The message to write.\n * @api public\n */\n\n\nProgressBar.prototype.interrupt = function (message) {\n  // clear the current line\n  this.stream.clearLine(); // move the cursor to the start of the line\n\n  this.stream.cursorTo(0); // write the message text\n\n  this.stream.write(message); // terminate the line after writing the message\n\n  this.stream.write('\\n'); // re-display the progress bar with its lastDraw\n\n  this.stream.write(this.lastDraw);\n};\n/**\n * Terminates a progress bar.\n *\n * @api public\n */\n\n\nProgressBar.prototype.terminate = function () {\n  if (this.clear) {\n    if (this.stream.clearLine) {\n      this.stream.clearLine();\n      this.stream.cursorTo(0);\n    }\n  } else {\n    this.stream.write('\\n');\n  }\n};","map":{"version":3,"sources":["C:/Users/chris/cs196-frontend-testing-website/node_modules/progress/lib/node-progress.js"],"names":["exports","module","ProgressBar","fmt","options","stream","process","stderr","total","Error","curr","width","clear","chars","complete","incomplete","head","renderThrottle","lastRender","Infinity","callback","tokens","lastDraw","prototype","tick","len","start","Date","render","undefined","terminate","force","isTTY","now","delta","ratio","Math","min","max","percent","floor","completeLength","elapsed","eta","rate","str","replace","isNaN","toFixed","isFinite","round","availableSpace","columns","length","platform","Array","join","slice","key","cursorTo","write","clearLine","update","goal","interrupt","message"],"mappings":"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","sourcesContent":["/*!\n * node-progress\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Expose `ProgressBar`.\n */\n\nexports = module.exports = ProgressBar;\n\n/**\n * Initialize a `ProgressBar` with the given `fmt` string and `options` or\n * `total`.\n *\n * Options:\n *\n *   - `curr` current completed index\n *   - `total` total number of ticks to complete\n *   - `width` the displayed width of the progress bar defaulting to total\n *   - `stream` the output stream defaulting to stderr\n *   - `head` head character defaulting to complete character\n *   - `complete` completion character defaulting to \"=\"\n *   - `incomplete` incomplete character defaulting to \"-\"\n *   - `renderThrottle` minimum time between updates in milliseconds defaulting to 16\n *   - `callback` optional function to call when the progress bar completes\n *   - `clear` will clear the progress bar upon termination\n *\n * Tokens:\n *\n *   - `:bar` the progress bar itself\n *   - `:current` current tick number\n *   - `:total` total ticks\n *   - `:elapsed` time elapsed in seconds\n *   - `:percent` completion percentage\n *   - `:eta` eta in seconds\n *   - `:rate` rate of ticks per second\n *\n * @param {string} fmt\n * @param {object|number} options or total\n * @api public\n */\n\nfunction ProgressBar(fmt, options) {\n  this.stream = options.stream || process.stderr;\n\n  if (typeof(options) == 'number') {\n    var total = options;\n    options = {};\n    options.total = total;\n  } else {\n    options = options || {};\n    if ('string' != typeof fmt) throw new Error('format required');\n    if ('number' != typeof options.total) throw new Error('total required');\n  }\n\n  this.fmt = fmt;\n  this.curr = options.curr || 0;\n  this.total = options.total;\n  this.width = options.width || this.total;\n  this.clear = options.clear\n  this.chars = {\n    complete   : options.complete || '=',\n    incomplete : options.incomplete || '-',\n    head       : options.head || (options.complete || '=')\n  };\n  this.renderThrottle = options.renderThrottle !== 0 ? (options.renderThrottle || 16) : 0;\n  this.lastRender = -Infinity;\n  this.callback = options.callback || function () {};\n  this.tokens = {};\n  this.lastDraw = '';\n}\n\n/**\n * \"tick\" the progress bar with optional `len` and optional `tokens`.\n *\n * @param {number|object} len or tokens\n * @param {object} tokens\n * @api public\n */\n\nProgressBar.prototype.tick = function(len, tokens){\n  if (len !== 0)\n    len = len || 1;\n\n  // swap tokens\n  if ('object' == typeof len) tokens = len, len = 1;\n  if (tokens) this.tokens = tokens;\n\n  // start time for eta\n  if (0 == this.curr) this.start = new Date;\n\n  this.curr += len\n\n  // try to render\n  this.render();\n\n  // progress complete\n  if (this.curr >= this.total) {\n    this.render(undefined, true);\n    this.complete = true;\n    this.terminate();\n    this.callback(this);\n    return;\n  }\n};\n\n/**\n * Method to render the progress bar with optional `tokens` to place in the\n * progress bar's `fmt` field.\n *\n * @param {object} tokens\n * @api public\n */\n\nProgressBar.prototype.render = function (tokens, force) {\n  force = force !== undefined ? force : false;\n  if (tokens) this.tokens = tokens;\n\n  if (!this.stream.isTTY) return;\n\n  var now = Date.now();\n  var delta = now - this.lastRender;\n  if (!force && (delta < this.renderThrottle)) {\n    return;\n  } else {\n    this.lastRender = now;\n  }\n\n  var ratio = this.curr / this.total;\n  ratio = Math.min(Math.max(ratio, 0), 1);\n\n  var percent = Math.floor(ratio * 100);\n  var incomplete, complete, completeLength;\n  var elapsed = new Date - this.start;\n  var eta = (percent == 100) ? 0 : elapsed * (this.total / this.curr - 1);\n  var rate = this.curr / (elapsed / 1000);\n\n  /* populate the bar template with percentages and timestamps */\n  var str = this.fmt\n    .replace(':current', this.curr)\n    .replace(':total', this.total)\n    .replace(':elapsed', isNaN(elapsed) ? '0.0' : (elapsed / 1000).toFixed(1))\n    .replace(':eta', (isNaN(eta) || !isFinite(eta)) ? '0.0' : (eta / 1000)\n      .toFixed(1))\n    .replace(':percent', percent.toFixed(0) + '%')\n    .replace(':rate', Math.round(rate));\n\n  /* compute the available space (non-zero) for the bar */\n  var availableSpace = Math.max(0, this.stream.columns - str.replace(':bar', '').length);\n  if(availableSpace && process.platform === 'win32'){\n    availableSpace = availableSpace - 1;\n  }\n\n  var width = Math.min(this.width, availableSpace);\n\n  /* TODO: the following assumes the user has one ':bar' token */\n  completeLength = Math.round(width * ratio);\n  complete = Array(Math.max(0, completeLength + 1)).join(this.chars.complete);\n  incomplete = Array(Math.max(0, width - completeLength + 1)).join(this.chars.incomplete);\n\n  /* add head to the complete string */\n  if(completeLength > 0)\n    complete = complete.slice(0, -1) + this.chars.head;\n\n  /* fill in the actual progress bar */\n  str = str.replace(':bar', complete + incomplete);\n\n  /* replace the extra tokens */\n  if (this.tokens) for (var key in this.tokens) str = str.replace(':' + key, this.tokens[key]);\n\n  if (this.lastDraw !== str) {\n    this.stream.cursorTo(0);\n    this.stream.write(str);\n    this.stream.clearLine(1);\n    this.lastDraw = str;\n  }\n};\n\n/**\n * \"update\" the progress bar to represent an exact percentage.\n * The ratio (between 0 and 1) specified will be multiplied by `total` and\n * floored, representing the closest available \"tick.\" For example, if a\n * progress bar has a length of 3 and `update(0.5)` is called, the progress\n * will be set to 1.\n *\n * A ratio of 0.5 will attempt to set the progress to halfway.\n *\n * @param {number} ratio The ratio (between 0 and 1 inclusive) to set the\n *   overall completion to.\n * @api public\n */\n\nProgressBar.prototype.update = function (ratio, tokens) {\n  var goal = Math.floor(ratio * this.total);\n  var delta = goal - this.curr;\n\n  this.tick(delta, tokens);\n};\n\n/**\n * \"interrupt\" the progress bar and write a message above it.\n * @param {string} message The message to write.\n * @api public\n */\n\nProgressBar.prototype.interrupt = function (message) {\n  // clear the current line\n  this.stream.clearLine();\n  // move the cursor to the start of the line\n  this.stream.cursorTo(0);\n  // write the message text\n  this.stream.write(message);\n  // terminate the line after writing the message\n  this.stream.write('\\n');\n  // re-display the progress bar with its lastDraw\n  this.stream.write(this.lastDraw);\n};\n\n/**\n * Terminates a progress bar.\n *\n * @api public\n */\n\nProgressBar.prototype.terminate = function () {\n  if (this.clear) {\n    if (this.stream.clearLine) {\n      this.stream.clearLine();\n      this.stream.cursorTo(0);\n    }\n  } else {\n    this.stream.write('\\n');\n  }\n};\n"]},"metadata":{},"sourceType":"script"}